{"version":3,"file":"index.f3a5ad4e.js","sources":["../../../../components/TaskForm.vue","../../../../components/TaskItem.vue","../../../../components/TaskList.vue","../../../../pages/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"task-form\">\r\n    <h3>Add New Task</h3>\r\n    <form @submit.prevent=\"addTask\">\r\n      <input \r\n        v-model=\"taskTitle\" \r\n        type=\"text\" \r\n        placeholder=\"Enter task title\"\r\n        required\r\n      />\r\n      <textarea \r\n        v-model=\"taskDescription\" \r\n        placeholder=\"Enter task description\"\r\n      ></textarea>\r\n      <button type=\"submit\">Add Task</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue'\r\n\r\nconst taskTitle = ref('')\r\nconst taskDescription = ref('')\r\nconst emit = defineEmits(['add-task'])\r\n\r\nfunction addTask() {\r\n  if (taskTitle.value.trim()) {\r\n    emit('add-task', {\r\n      id: Date.now(),\r\n      title: taskTitle.value,\r\n      description: taskDescription.value,\r\n      completed: false,\r\n      createdAt: new Date()\r\n    })\r\n    taskTitle.value = ''\r\n    taskDescription.value = ''\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.task-form {\r\n  margin-bottom: 20px;\r\n  padding: 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n}\r\n\r\ninput, textarea {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n</style>","<template>\r\n  <div class=\"task-item\" :class=\"{ 'completed': task.completed }\">\r\n    <div class=\"task-content\">\r\n      <input \r\n        type=\"checkbox\" \r\n        :checked=\"task.completed\" \r\n        @change=\"toggleComplete\"\r\n      />\r\n      <div>\r\n        <h3>{{ task.title }}</h3>\r\n        <p>{{ task.description }}</p>\r\n        <small>Created: {{ formatDate(task.createdAt) }}</small>\r\n      </div>\r\n    </div>\r\n    <button @click=\"deleteTask\" class=\"delete-btn\">Delete</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nconst props = defineProps({\r\n  task: {\r\n    type: Object,\r\n    required: true\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['toggle-complete', 'delete-task'])\r\n\r\nfunction toggleComplete() {\r\n  emit('toggle-complete', props.task.id)\r\n}\r\n\r\nfunction deleteTask() {\r\n  emit('delete-task', props.task.id)\r\n}\r\n\r\nfunction formatDate(date) {\r\n  if (!date) return ''\r\n  const d = new Date(date)\r\n  return d.toLocaleDateString()\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.task-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n}\r\n\r\n.task-content {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 10px;\r\n}\r\n\r\n.completed h3 {\r\n  text-decoration: line-through;\r\n  color: #888;\r\n}\r\n\r\n.delete-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-btn:hover {\r\n  background-color: #d32f2f;\r\n}\r\n</style>","<template>\r\n  <div class=\"task-list\">\r\n    <h2>My Tasks</h2>\r\n    <div v-if=\"tasks.length === 0\" class=\"empty-state\">\r\n      No tasks yet. Add a new task to get started!\r\n    </div>\r\n    <TaskItem \r\n      v-for=\"task in tasks\" \r\n      :key=\"task.id\" \r\n      :task=\"task\"\r\n      @toggle-complete=\"$emit('toggle-complete', $event)\"\r\n      @delete-task=\"$emit('delete-task', $event)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport TaskItem from './TaskItem.vue'\r\n\r\ndefineProps({\r\n  tasks: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n})\r\n\r\ndefineEmits(['toggle-complete', 'delete-task'])\r\n</script>\r\n\r\n<style scoped>\r\n.task-list {\r\n  margin-top: 20px;\r\n}\r\n\r\n.empty-state {\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #666;\r\n  font-style: italic;\r\n}\r\n</style>","<template>\r\n  <div class=\"container\">\r\n    <h1>Task Manager</h1>\r\n    <TaskForm @add-task=\"addTask\" />\r\n    <TaskList \r\n      :tasks=\"tasks\" \r\n      @toggle-complete=\"toggleTaskComplete\"\r\n      @delete-task=\"deleteTask\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue'\r\nimport TaskForm from '~/components/TaskForm.vue'\r\nimport TaskList from '~/components/TaskList.vue'\r\n\r\n// State for tasks\r\nconst tasks = ref([])\r\n\r\n// Add a new task\r\nfunction addTask(task) {\r\n  tasks.value.push(task)\r\n  // In a real app, you might want to save to localStorage or an API\r\n  saveToLocalStorage()\r\n}\r\n\r\n// Toggle task completion status\r\nfunction toggleTaskComplete(taskId) {\r\n  const task = tasks.value.find(t => t.id === taskId)\r\n  if (task) {\r\n    task.completed = !task.completed\r\n    saveToLocalStorage()\r\n  }\r\n}\r\n\r\n// Delete a task\r\nfunction deleteTask(taskId) {\r\n  tasks.value = tasks.value.filter(t => t.id !== taskId)\r\n  saveToLocalStorage()\r\n}\r\n\r\n// Save tasks to localStorage\r\nfunction saveToLocalStorage() {\r\n  localStorage.setItem('tasks', JSON.stringify(tasks.value))\r\n}\r\n\r\n// Load tasks from localStorage on component mount\r\nif (process.client) {\r\n  const savedTasks = localStorage.getItem('tasks')\r\n  if (savedTasks) {\r\n    tasks.value = JSON.parse(savedTasks)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n</style>"],"names":["_ssrRenderAttrs","_mergeProps","_ssrIncludeBooleanAttr","_ssrInterpolate","_ssrRenderList","$emit","_ssrRenderComponent"],"mappings":";;;;;;;;;AAsBA,UAAM,YAAY,IAAI,EAAE;AACxB,UAAM,kBAAkB,IAAI,EAAE;;mBAtBvBA,eAAAC,WAAA,EAAA,OAAM,YAAW,GAAA,MAAA,CAAA,6GAIP,UAAS,KAAA,uJAMT,gBAAe,KAAA;;;;;;;;;;;;;;;;;;;;;;;ACyBhC,aAAS,WAAW,MAAM;AACxB,UAAI,CAAC;AAAM,eAAO;AAClB,YAAM,IAAI,IAAI,KAAK,IAAI;AACvB,aAAO,EAAE,mBAAoB;AAAA,IAC/B;;;QAvCO,OAAM,CAAA,aAAmC,EAAA,aAAA,QAAA,KAAK,WAAS;AAAA,qGAI5CC,sBAAA,QAAA,KAAK,SAAS,IAAA,aAAA,+DAIjBC,eAAA,QAAA,KAAK,KAAK,4BACXA,eAAA,QAAA,KAAK,WAAW,uDACH,WAAW,QAAI,KAAC,SAAS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;ACV7C,YAAA,OAAAH,eAAAC,WAAA,EAAA,OAAM,eAAW,MAAA,CAAA,qDAAA;AAET,UAAA,QAAA,MAAM,WAAM,GAAA;;;;;;AAING,oBAAA,QAAA,QAAR,SAAI;;UACV,KAAK,KAAK;AAAA,UACV;AAAA,UACA,kBAAe,YAAEC,KAAK,MAAA,mBAAoB,MAAM;AAAA,UAChD,cAAW,YAAEA,KAAK,MAAA,eAAgB,MAAM;AAAA;;;;;;;;;;;;;;;;;;ACO/C,UAAM,QAAQ,IAAI,EAAE;AAGpB,aAAS,QAAQ,MAAM;AACrB,YAAM,MAAM,KAAK,IAAI;AAErB,yBAAoB;AAAA,IACtB;AAGA,aAAS,mBAAmB,QAAQ;AAClC,YAAM,OAAO,MAAM,MAAM,KAAK,OAAK,EAAE,OAAO,MAAM;AAClD,UAAI,MAAM;AACR,aAAK,YAAY,CAAC,KAAK;AACvB,2BAAoB;AAAA,MACrB;AAAA,IACH;AAGA,aAAS,WAAW,QAAQ;AAC1B,YAAM,QAAQ,MAAM,MAAM,OAAO,OAAK,EAAE,OAAO,MAAM;AACrD,yBAAoB;AAAA,IACtB;AAGA,aAAS,qBAAqB;AAC5B,mBAAa,QAAQ,SAAS,KAAK,UAAU,MAAM,KAAK,CAAC;AAAA,IAC3D;;AA5CO,YAAA,OAAAL,eAAAC,WAAA,EAAA,OAAM,eAAW,MAAA,CAAA,yDAAA;AAET,YAAAK,mBAAA,UAAA,EAAA,WAAU,WAAO,MAAA,OAAA,CAAA;;QAEzB,OAAO,MAAK;AAAA,QACZ,kBAAiB;AAAA,QACjB,cAAa;AAAA;;;;;;;;;;;;"}